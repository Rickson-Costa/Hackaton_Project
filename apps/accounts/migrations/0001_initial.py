# Generated by Django 4.2.7 on 2025-09-12 03:20

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('cpf', models.CharField(blank=True, max_length=14, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='CPF deve estar no formato XXX.XXX.XXX-XX ou apenas números', regex='^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$|^\\d{11}$')], verbose_name='CPF')),
                ('telefone', models.CharField(blank=True, max_length=20, verbose_name='Telefone')),
                ('role', models.CharField(choices=[('admin', 'Administrador'), ('ti', 'TI'), ('fiscal', 'Fiscal'), ('financeiro', 'Financeiro'), ('analista', 'Analista'), ('cliente', 'Cliente')], default='analista', max_length=20, verbose_name='Função')),
                ('department', models.CharField(blank=True, choices=[('administrativo', 'Administrativo'), ('financeiro', 'Financeiro'), ('ti', 'Tecnologia da Informação'), ('fiscal', 'Fiscal'), ('operacional', 'Operacional'), ('diretoria', 'Diretoria')], max_length=30, verbose_name='Departamento')),
                ('is_cliente_externo', models.BooleanField(default=False, help_text='Indica se é um cliente externo da FUNETEC', verbose_name='Cliente Externo')),
                ('last_activity', models.DateTimeField(blank=True, null=True, verbose_name='Última Atividade')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
                'ordering': ['-date_joined'],
                'permissions': [('can_manage_users', 'Pode gerenciar usuários'), ('can_view_financial_data', 'Pode ver dados financeiros'), ('can_manage_contracts', 'Pode gerenciar contratos'), ('can_manage_projects', 'Pode gerenciar projetos'), ('can_generate_reports', 'Pode gerar relatórios')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, verbose_name='Biografia')),
                ('data_nascimento', models.DateField(blank=True, null=True, verbose_name='Data de Nascimento')),
                ('rg', models.CharField(blank=True, max_length=20, verbose_name='RG')),
                ('estado_civil', models.CharField(blank=True, choices=[('solteiro', 'Solteiro(a)'), ('casado', 'Casado(a)'), ('divorciado', 'Divorciado(a)'), ('viuvo', 'Viúvo(a)'), ('uniao_estavel', 'União Estável')], max_length=20, verbose_name='Estado Civil')),
                ('cargo', models.CharField(blank=True, max_length=100, verbose_name='Cargo')),
                ('data_admissao', models.DateField(blank=True, null=True, verbose_name='Data de Admissão')),
                ('cep', models.CharField(blank=True, max_length=9, verbose_name='CEP')),
                ('logradouro', models.CharField(blank=True, max_length=200, verbose_name='Logradouro')),
                ('numero', models.CharField(blank=True, max_length=10, verbose_name='Número')),
                ('complemento', models.CharField(blank=True, max_length=100, verbose_name='Complemento')),
                ('bairro', models.CharField(blank=True, max_length=100, verbose_name='Bairro')),
                ('cidade', models.CharField(blank=True, max_length=100, verbose_name='Cidade')),
                ('uf', models.CharField(blank=True, max_length=2, verbose_name='UF')),
                ('notificar_email', models.BooleanField(default=True, verbose_name='Notificar por Email')),
                ('notificar_sistema', models.BooleanField(default=True, verbose_name='Notificar no Sistema')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/', verbose_name='Foto do Perfil')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Perfil de Usuário',
                'verbose_name_plural': 'Perfis de Usuários',
            },
        ),
    ]
